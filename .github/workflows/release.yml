name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'package.json'
      - 'src-tauri/Cargo.toml'
      - 'src-tauri/tauri.conf.json'
  pull_request:
    branches:
      - main
    paths:
      - 'package.json'
      - 'src-tauri/Cargo.toml'
      - 'src-tauri/tauri.conf.json'

jobs:
  # Check if version actually changed
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check if version changed
        id: check
        run: |
          # Check if any version-related files changed
          if git diff HEAD~1 HEAD --name-only | grep -E "(package\.json|Cargo\.toml|tauri\.conf\.json)"; then
            # Check if version field actually changed in package.json
            if git diff HEAD~1 HEAD package.json | grep -E "^\+.*\"version\":" || \
               git diff HEAD~1 HEAD src-tauri/Cargo.toml | grep -E "^\+.*version = " || \
               git diff HEAD~1 HEAD src-tauri/tauri.conf.json | grep -E "^\+.*\"version\":"; then
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "Version changed detected"
            else
              echo "changed=false" >> $GITHUB_OUTPUT
              echo "No version change detected"
            fi
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No version-related files changed"
          fi

  # Desktop releases
  publish-tauri:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm' # Set this to npm, yarn or pnpm.

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolbox@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: npm ci # change this to npm or pnpm depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'ChatMe v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}